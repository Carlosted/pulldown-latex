mod lex;
pub mod operator_table;
mod primitives;

use std::fmt::{Display, Write};

use thiserror::Error;

use crate::event::{Content, Event, Visual};

// FOR NOW:
// - Do not bother about macros, because they will be solvable.
//  Macro expansion could be solvable with `&mut [&'a str]` as input instead of `&mut &'a str`
//  OR
//  It could be solved by using heap allocation for the expansion. If we use heap allocation, we
//  will need to find a way to solve self referencing, or we could just leak a string allocation
//  and drop it when the parser is dropped. Also, this new complete fragment generated by the
//  allocation needs to be matched with what is following. Here is a minimal example:
// ```TeX
// \def\abc{\frac{1}}
//
// $$
// \abc{2}
// $$
// ```
// This should successfully output 1/2
//
// Also:
// ```TeX
//
// \def\abc{\it}
//
// \[
//     \abc 56
// \]
// ```
// This should successfully make the font change.
//
// Either way, we will be fine so lets not worry about it for now.

// TODO: double subscript and superscript errors are not handled.
//  To remedy this, we could systematically make a Instruction::Substring represent a group, and
//  thus when parsing a `{`, we would check if a `^` or `_` is present. This would make the events
//  not be `infixes` anymore, which would play nicer with the mathml renderer.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Token<'a> {
    ControlSequence(&'a str),
    Character(char),
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Argument<'a> {
    Token(Token<'a>),
    Group(&'a str),
}

#[derive(Debug)]
pub(crate) enum Instruction<'a> {
    /// Send the event
    Event(Event<'a>),
    /// Parse the substring
    Substring(&'a str),
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum GroupType {
    /// The group was initiated by a `{` character.
    Brace,
    /// The group was initiated by a `\begingroup` command.
    BeginGroup,
    /// The group was initiated by a `\left` command.
    LeftRight,
}

impl Display for GroupType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GroupType::Brace => f.write_char('}'),
            GroupType::BeginGroup => f.write_str("\\endgroup"),
            GroupType::LeftRight => f.write_str("\\right"),
        }
    }
}

#[derive(Debug)]
pub struct Parser<'a> {
    /// What the initial input is.
    ///
    /// This is required for error reporting and calculating the byte offset when an error occurs.
    input: &'a str,
    /// The next thing that should be parsed or outputed.
    ///
    /// When this is a string/substring, we should parse it. Some commands output
    /// multiple events, so we need to keep track of them and ouput them in the next
    /// iteration before continuing parsing.
    pub(crate) instruction_stack: Vec<Instruction<'a>>,

    pub(crate) group_stack: Vec<GroupType>,
}

pub type Result<T> = std::result::Result<T, ParserError>;

#[derive(Debug, Error)]
pub enum ParserError {
    #[error("unbalanced group found, expected {}", .0.map_or(String::from("no group closing"), |t| t.to_string()))]
    UnbalancedGroup(Option<GroupType>),
    #[error(
        "unexpected math `$` (math shift) character - this character is currently unsupported."
    )]
    MathShift,
    #[error("unexpected hash sign `#` character - this character can only be used in macro definitions.")]
    HashSign,
    #[error("unexpected alignment character `&` - this character can only be used in tabular environments (not yet supported).")]
    AlignmentChar,
    #[error("unexpected end of input")]
    EndOfInput,
    #[error("expected a dimension specification")]
    Dimension,
    #[error("expected a dimension or glue specification")]
    Glue,
    #[error("expected a dimension or glue argument")]
    DimensionArgument,
    #[error("expected a dimensional unit")]
    DimensionUnit,
    #[error("expected mathematical units (mu) in dimension specification")]
    MathUnit,
    #[error("expected a delimiter token")]
    Delimiter,
    #[error("expected a control sequence")]
    ControlSequence,
    #[error("expected a number")]
    Number,
    #[error("expected a character representing a number after '`'. found a non ascii character.")]
    CharacterNumber,
    #[error("expected an argument")]
    Argument,
    #[error("Trying to add a subscript with no content")]
    EmptySubscript,
    #[error("trying to add a superscript with no content")]
    EmptySuperscript,
    #[error("Trying to add a subscript twice to the same element")]
    DoubleSubscript,
    #[error("Trying to add a superscript twice to the same element")]
    DoubleSuperscript,
    #[error("Unknown primitive command found")]
    UnknownPrimitive,
}

// TODO: make `trim_start` (removing whitespace) calls more systematic.
impl<'a> Parser<'a> {
    fn new(input: &'a str) -> Self {
        let mut instruction_stack = Vec::with_capacity(64);
        instruction_stack.push(Instruction::Substring(input));
        let group_stack = Vec::with_capacity(16);
        Self {
            input,
            instruction_stack,
            group_stack,
        }
    }

    /// Get the current string we are parsing.
    ///
    /// This function guarantees that the string returned is not empty.
    fn current_string(&mut self) -> Option<&mut &'a str> {
        let Some(Instruction::Substring(content)) = self.instruction_stack.last() else {
            return None;
        };
        if content.is_empty() {
            self.instruction_stack.pop();
            let popped = self.group_stack.pop();
            if popped != Some(GroupType::Brace) {
                // TODO: This should be: return Err(ParserError::UnbalancedGroup(popped));
                return None;
            }
            self.current_string()
        } else {
            match self.instruction_stack.last_mut() {
                Some(Instruction::Substring(content)) => Some(content),
                _ => unreachable!(),
            }
        }
    }

    /// Handles the superscript and/or subscript following what was parsed previously.
    ///
    /// This must be called when a suffix can be present on the element being parsed.
    fn check_suffixes(&mut self) -> Option<Result<Visual>> {
        let (mut subscript, mut superscript) = (None, None);
        let str = self.current_string()?;
        *str = str.trim_start();
        let suffix = str.chars().next().expect("current_string is not empty");
        match suffix {
            '^' => {
                *str = &str[1..];
                let Some(str) = self.current_string() else {
                    return Some(Err(ParserError::EmptySuperscript));
                };
                match lex::argument(str) {
                    Ok(arg) => superscript = Some(arg),
                    Err(e) => return Some(Err(e)),
                };
            }
            '_' => {
                *str = &str[1..];
                let Some(str) = self.current_string() else {
                    return Some(Err(ParserError::EmptySubscript));
                };
                match lex::argument(str) {
                    Ok(arg) => subscript = Some(arg),
                    Err(e) => return Some(Err(e)),
                };
            }
            _ => return None,
        };
        if let Some(s) = self.current_string() {
            *s = s.trim_start();
            match s.chars().next().expect("current_string is not empty") {
                '^' if superscript.is_none() => {
                    *s = &s[1..];
                    let Some(str) = self.current_string() else {
                        return Some(Err(ParserError::EmptySuperscript));
                    };
                    match lex::argument(str) {
                        Ok(arg) => superscript = Some(arg),
                        Err(e) => return Some(Err(e)),
                    };
                }
                '_' if subscript.is_none() => {
                    *s = &s[1..];
                    let Some(str) = self.current_string() else {
                        return Some(Err(ParserError::EmptySubscript));
                    };
                    match lex::argument(str) {
                        Ok(arg) => subscript = Some(arg),
                        Err(e) => return Some(Err(e)),
                    };
                }
                '^' => return Some(Err(ParserError::DoubleSuperscript)),
                '_' => return Some(Err(ParserError::DoubleSubscript)),
                _ => {}
            };
        };

        Some(match (subscript, superscript) {
            (Some(sub), Some(sup)) => self
                .handle_argument(sup)
                .and_then(|_| self.handle_argument(sub))
                .map(|_| Visual::SubSuperscript),
            (None, Some(sup)) => self.handle_argument(sup).map(|_| Visual::Superscript),
            (Some(sub), None) => self.handle_argument(sub).map(|_| Visual::Subscript),
            (None, None) => unreachable!(),
        })
    }

    fn handle_suffix(&mut self, event: Event<'a>) -> Result<Event<'a>> {
        if let Some(visual) = self.check_suffixes() {
            self.instruction_stack.push(Instruction::Event(event));
            visual.map(|v| Event::Visual(v))
        } else {
            Ok(event)
        }
    }

    /// Parse an arugment and pushes the argument to the stack surrounded by a
    /// group: [..., EndGroup, Argument, BeginGroup]
    //
    // TODO: What if we get something like '^' as an argument?, the function handle_char_token will
    // throw an error, so should we
    pub(crate) fn handle_argument(&mut self, argument: Argument<'a>) -> Result<()> {
        self.instruction_stack
            .push(Instruction::Event(Event::EndGroup));
        let arg = match argument {
            Argument::Token(token) => Instruction::Event(match token {
                Token::ControlSequence(cs) => self.handle_primitive(cs)?,
                Token::Character(c) => self.handle_char_token(c)?,
            }),
            Argument::Group(group) => {
                self.group_stack.push(GroupType::Brace);
                Instruction::Substring(group)
            }
        };
        self.instruction_stack
            .extend([arg, Instruction::Event(Event::BeginGroup)]);
        Ok(())
    }

    /// Return the context surrounding the error reported.
    fn error_context(&self) -> &str {
        // TODO: Here we should check whether the pointer is currently inside a `prelude` or inside
        // of the inputed string.
        // Safety:
        // * Both `self` and `origin` must be either in bounds or one
        //   byte past the end of the same [allocated object].
        //   => this is true, as self never changes the allocation of the `input`.
        //
        // * Both pointers must be *derived from* a pointer to the same object.
        //   (See below for an example.)
        //   => this is true, as `initial_byte_ptr` is derived from `input.as_ptr()`.
        // * The distance between the pointers, in bytes, must be an exact multiple
        //   of the size of `T`.
        //   => this is true, as both pointers are `u8` pointers.
        // * The distance between the pointers, **in bytes**, cannot overflow an `isize`.
        //   => this is true, as the distance is always positive.
        // * The distance being in bounds cannot rely on "wrapping around" the address space.
        //   => this is true, as the distance is always positive.
        todo!()
    }
}

impl<'a> Iterator for Parser<'a> {
    type Item = Result<Event<'a>>;

    fn next(&mut self) -> Option<Self::Item> {
        match self.instruction_stack.last_mut() {
            Some(Instruction::Event(_)) => {
                let event = self
                    .instruction_stack
                    .pop()
                    .expect("there is something in the stack");
                Some(Ok(match event {
                    Instruction::Event(event) => event,
                    _ => unreachable!(),
                }))
            }
            Some(Instruction::Substring(content)) => {
                if content.is_empty() {
                    self.instruction_stack.pop();
                    let popped = self.group_stack.pop();
                    if popped != Some(GroupType::Brace) {
                        return Some(Err(ParserError::UnbalancedGroup(popped)));
                    }
                    return self.next();
                }
                let mut chars = content.chars();
                let next_char = chars.next().expect("the content is not empty");

                Some(match next_char {
                    // TODO: Comments should be handled here.
                    '.' | '0'..='9' => {
                        let len = content
                            .chars()
                            .skip(1)
                            .take_while(|&c| c.is_ascii_digit() || c == '.')
                            .count()
                            + 1;
                        let (number, rest) = content.split_at(len);
                        *content = rest;
                        Ok(Event::Content(Content::Number(number)))
                    }
                    '\\' => {
                        *content = &content[1..];
                        lex::rhs_control_sequence(content).and_then(|cs| self.handle_primitive(cs))
                    }
                    c => {
                        *content = chars.as_str();
                        self.handle_char_token(c)
                    }
                })
            }
            None => None,
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::event::{Identifier, Operator};

    use super::*;

    #[test]
    fn test_get_byte_index() {
        todo!()
    }

    // Tests for event generation.
    #[test]
    fn substr_instructions() {
        let parser = Parser::new("\\bar{y}");
        let events = parser.collect::<Result<Vec<_>>>().unwrap();

        println!("{events:?}");

        assert_eq!(
            events,
            vec![
                Event::Visual(Visual::Overscript),
                Event::BeginGroup,
                Event::Content(Content::Identifier(Identifier::Char('y'))),
                Event::EndGroup,
                Event::Content(Content::Operator(Operator {
                    content: '‾',
                    stretchy: None,
                    moveable_limits: None,
                    left_space: None,
                    right_space: None,
                    size: None,
                })),
            ]
        );
    }
}

// How to handle Comments:
//
// Comments are handled by the lexer, and are not passed to the parser. The lexer will remove the
// comment from the input, and the parser will not see it.

// Token parsing procedure, as per TeXbook p. 46-47.
//
// This is roughly what the lexer implementation will look like for text mode.
//
// 1. Trim any trailing whitespace from a line.
//
// 2. If '\' (escape character) is encountered, parse the next token.
//  '\n' => _The name is empty_???
//  'is_ascii_alphabetic' => parse until an non ASCII alphabetic, and the name is the token
//  'otherwise' => parse next character, and the name is the symbol.
//
//  Go to SkipBlanks mode if the token is a word or a space symbol.
//  Otherwise, go to MidLine mode.
//
// 3. If `^^` is found:
//  - If the following are two characters of type ASCII lowercase letter or digit,
//  then `^^__` is converted to the correspoding ascii value.
//  - If the following is a single ASCII character, then `^^_` is converted to the corresponding ASCII
//  value with the formula: if `c` is the character, then `c + 64` if `c` if the character has code
//  between 0 and 63, and `c - 64` if the character has code between 64 and 127.
//
//  __Note__: This rule takes precedence over escape character parsing. If such a sequence is found
//  in an escape sequence, it is converted to the corresponding ASCII value.
//
// 4. If the token is a single character, go to MidLine mode.
//
// 5. If the token is an end of line, go to the next line. If nothing was on the line (were in NewLine state), then the
//  `par` token is emitted, meaning that a new paragraph should be started.
//  If the state was MidLine, then the newline is transformed into a space.
//  If the state was SkipBlanks, then the newline is ignored.
//
// 6. Ignore characters from the `Ignore` category.
//
// 7. If the token is a space and the mode is MidLine, the space is transformed into a space token.
//
// 8. If the token is a comment, ignore the rest of the line, and go to the next line.
//
// 9. Go to newlines on the next line.
